}
m <- as.data.frame(means)
plot <- ggplot(m) +
geom_histogram(aes(x = means),
color = "white",
fill = "purple") +
geom_vline(xintercept = mean(m$means)) +
theme_minimal()
plot
}
clt()
# This bit of code clears the entire Rstudio environment - us with care!
rm(list=ls())
library(ggplot2)
# setting randomisation seed so that we can replicate this code exactly
clt <- function(n = 1000,
mu = 0,
sd = 1, x
t = 1000,
seed = NA,
size = 30) {
T <- t
x <- runif(n = n, min = 0, max = 1)
means <- c()
for (i in 1:T) {
means[i] <-
mean(sample(x,
size = size,
replace = T),
na.rm = T)
}
m <- as.data.frame(means)
plot <- ggplot(m) +
geom_histogram(aes(x = means),
color = "white",
fill = "purple") +
geom_vline(xintercept = mean(m$means)) +
theme_minimal()
plot
}
clt()
clt <- function(n = 1000,
mu = 0,
sd = 1, x
t = 1000,
seed = NA,
size = 30) {
T <- t
x <- runif(n = n, min = 0, max = 1)
means <- c()
for (i in 1:T) {
means[i] <-
mean(sample(x,
size = size,
replace = T),
na.rm = T)
}
clt <- function(n = 1000,
mu = 0,
sd = 1, x
t = 1000,
seed = NA,
size = 30) {
T <- t
x <- runif(n = n, min = 0, max = 1)
means <- c()
for (i in 1:T) {
means[i] <-
mean(sample(x,
size = size,
replace = T),
na.rm = T)
}
clt()
# This bit of code clears the entire Rstudio environment - us with care!
rm(list=ls())
import pandas as pd
reticulate::repl_python()
import pandas as pd
n
reticulate::repl_python()
import pandas as pd
from palmerpenguins import load_penguins
penguins = load_penguins()
penguins.describe()
pip install palmerpenguins
pip install palmerpenguins
pip install palmerpenguins
library(reticulate)
quit
library(reticulate)
reticulate::repl_python()
pip install palmerpenguins
install palmerpenguins
pip install palmerpenguins
pip install pandas
p = 10
import pandas as pd
import seaborn as sns
from palmerpenguins import load_penguins
sns.set_style('whitegrid')
pip install palmerpenguins
!pip install palmerpenguins
# -*- coding: utf-8 -*-
"""
Created on Fri Sep 29 17:53:25 2017
@author: 5558
"""
import urllib3 as ul
from bs4 import BeautifulSoup
import os
import time
#import requests
#import urllib2
from selenium import webdriver
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support.ui import WebDriverWait
from selenium.common.exceptions import StaleElementReferenceException
link = 'http://agmarknet.gov.in/PriceTrends/SA_Pri_Month.aspx'
http = ul.PoolManager()
page =http.request('GET',link)
soup = BeautifulSoup(page.data)
commodities = soup.find_all('select',id='cphBody_Commodity_list')
hh = webdriver.ChromeOptions()
hh.add_argument("--start-maximized")
driver = webdriver.Chrome(chrome_options=hh)
driver.get(link) #opening the link in the driver .
path = '//select[@id="cphBody_Commodity_list"]'
commodity_element = driver.find_element_by_xpath(path)
commodity_select = Select(commodity_element)
commodity_values =  [ '%s' % o.get_attribute('value') for o in commodity_select.options[1:] ]
def get_year_select():
path = '//select[@id="cphBody_Year_list"]'
year_select_elem = driver.find_element_by_xpath(path)
year_select = Select(year_select_elem)
return year_select
def get_month_select():
path = '//select[@id="cphBody_Month_list"]'
month_select_elem = driver.find_element_by_xpath(path)
month_select = Select(month_select_elem)
return month_select
def select_commodity_option( value, dowait=True):
'''
Select state value from dropdown. Wait until district dropdown
has loaded before returning.
'''
path = '//select[@id="cphBody_Year_list"]'
year_select_elem = driver.find_element_by_xpath(path)
def year_select_updated(driver):
try:
year_select_elem.text
except StaleElementReferenceException:
return True
except:
pass
return False
commodity_select
commodity_select.select_by_value(value)
if dowait:
wait = WebDriverWait(driver, 20)
wait.until(year_select_updated)
return get_year_select()
def select_year_option( value, dowait=True):
'''
Select state value from dropdown. Wait until district dropdown
has loaded before returning.
'''
path = '//select[@id="cphBody_Month_list"]'
month_select_elem = driver.find_element_by_xpath(path)
def month_select_updated(driver):
try:
month_select_elem.text
except StaleElementReferenceException:
return True
except:
pass
return False
year_select = get_year_select()
year_select.select_by_value(value)
if dowait:
wait = WebDriverWait(driver, 20)
wait.until(month_select_updated)
return get_month_select()
def select_month_option(value,dowait=True) :
month_element = get_month_select()
month_element.select_by_value(value)
#from selenium.webdriver.common.action_chains import ActionChains
def rename(commodity,year,month) :
os.rename('C:/Users/5558/Downloads/Agmarknet_State_wise_Wholesale_Prices_Monthly_Analysis.xls','C:/Users/5558/Downloads/%s_%s_%s.xls'%(commodity,year,month))
def submit_download(values,year,month) :
select_month_option(month)
driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
driver.find_element_by_id("cphBody_But_Submit").click()
driver.find_element_by_id("cphBody_Button1").click()
time.sleep(5)
rename(values,year,month)
#driver.find_element_by_id("cphBody_btnBack").click()
#import time
for values in commodity_values :
if values == '49' :
k=1
years = select_commodity_option(values)
years_values =  [ '%s' % o.get_attribute('value') for o in years.options[1:] ]
for year in years_values :
w=0
if k!=1 :
select_commodity_option(values)
months = select_year_option(year)
month_values =  [ '%s' % o.get_attribute('value') for o in months.options[1:] ]
for month in month_values :
if os.path.exists('C:/Users/5558/Downloads/%s_%s_%s.xls'%(values,year,month)):
continue
w=w+1
if w!=1 :
select_commodity_option(values)
select_year_option(year)
select_month_option(month)
submit_download(values,year,month)
driver.close()
k=k+1
hh = webdriver.ChromeOptions()
hh.add_argument("--start-maximized")
driver = webdriver.Chrome(chrome_options=hh)
driver.get(link) #opening the link in the driver .
path = '//select[@id="cphBody_Commodity_list"]'
commodity_element = driver.find_element_by_xpath(path)
commodity_select = Select(commodity_element)
!pip install palmerpenguins
import pandas as pd
import seaborn as sns
from palmerpenguins import load_penguins
sns.set_style('whitegrid')
penguins = load_penguins()
penguins.head()
g = sns.boxplot(x = 'island',
y ='body_mass_g',
hue = 'species',
data = penguins,
palette=['#FF8C00','#159090','#A034F0'],
linewidth=0.3)
g.set_xlabel('Island')
g.set_ylabel('Body Mass')
g
g = sns.boxplot(x = 'island',
y ='body_mass_g',
hue = 'species',
data = penguins,
palette=['#FF8C00','#159090','#A034F0'],
linewidth=0.3)
g.set_xlabel('Island')
g.set_ylabel('Body Mass')
print(g)
plt.show()
plt.show(g)
g.show()
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
plt.show()
from palmerpenguins import load_penguins
sns.set_style('whitegrid')
penguins = load_penguins()
penguins.head()
g = sns.boxplot(x = 'island',
y ='body_mass_g',
hue = 'species',
data = penguins,
palette=['#FF8C00','#159090','#A034F0'],
linewidth=0.3)
g.set_xlabel('Island')
g.set_ylabel('Body Mass')
View(g)
import seaborn as sns
import matplotlib.pyplot as plt
l = [41, 44, 46, 46, 47, 47, 48, 48, 49, 51, 52, 53, 53, 53, 53, 55, 55, 55,
55, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58,
58, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 61,
61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62,
62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 65,
65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66,
67, 67, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 69, 69, 69, 70, 70,
70, 70, 71, 71, 71, 71, 71, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 73,
74, 74, 74, 74, 74, 75, 75, 75, 76, 77, 77, 78, 78, 79, 79, 79, 79, 80,
80, 80, 80, 81, 81, 81, 81, 83, 84, 84, 85, 86, 86, 86, 86, 87, 87, 87,
87, 87, 88, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 91, 92,
92, 93, 93, 93, 94, 95, 95, 96, 98, 98, 99, 100, 102, 104, 105, 107, 108,
109, 110, 110, 113, 113, 115, 116, 118, 119, 121]
sns.distplot(l, kde=True, rug=False)
plt.show()
import seaborn as sns
import matplotlib.pyplot as plt
l = [41, 44, 46, 46, 47, 47, 48, 48, 49, 51, 52, 53, 53, 53, 53, 55, 55, 55,
55, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58,
58, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 61,
61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62,
62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 65,
65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66,
67, 67, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 69, 69, 69, 70, 70,
70, 70, 71, 71, 71, 71, 71, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 73,
74, 74, 74, 74, 74, 75, 75, 75, 76, 77, 77, 78, 78, 79, 79, 79, 79, 80,
80, 80, 80, 81, 81, 81, 81, 83, 84, 84, 85, 86, 86, 86, 86, 87, 87, 87,
87, 87, 88, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 91, 92,
92, 93, 93, 93, 94, 95, 95, 96, 98, 98, 99, 100, 102, 104, 105, 107, 108,
109, 110, 110, 113, 113, 115, 116, 118, 119, 121]
sns.distplot(l, kde=True, rug=False)
plt.show()
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
plt.show()
from palmerpenguins import load_penguins
sns.set_style('whitegrid')
penguins = load_penguins()
penguins.head()
g = sns.boxplot(x = 'island',
y ='body_mass_g',
hue = 'species',
data = penguins,
palette=['#FF8C00','#159090','#A034F0'],
linewidth=0.3)
g.set_xlabel('Island')
g.set_ylabel('Body Mass')
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
plt.show()
from palmerpenguins import load_penguins
sns.set_style('whitegrid')
penguins = load_penguins()
penguins.head()
g = sns.boxplot(x = 'island',
y ='body_mass_g',
hue = 'species',
data = penguins,
palette=['#FF8C00','#159090','#A034F0'],
linewidth=0.3)
g.set_xlabel('Island')
g.set_ylabel('Body Mass')
g = sns.lmplot(x="flipper_length_mm",
y="body_mass_g",
hue="species",
height=7,
data=penguins,
palette=['#FF8C00','#159090','#A034F0'])
g.set_xlabels('Flipper Length')
g.set_ylabels('Body Mass')
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
plt.show()
from palmerpenguins import load_penguins
sns.set_style('whitegrid')
penguins = load_penguins()
penguins.head()
g = sns.lmplot(x="flipper_length_mm",
y="body_mass_g",
hue="species",
height=7,
data=penguins,
palette=['#FF8C00','#159090','#A034F0'])
g.set_xlabels('Flipper Length')
g.set_ylabels('Body Mass')
quit
rm(list=ls())
---
title: |
| Data Visualisation:
subtitle: |
| Data Visualisation using  \textcolor{purpleish}{\colorbox{greyish}{\textbf{ggplot2}}}
author: |
| Zaeen de Souza\ddagger
| 19/04/22
| Centre for Sustainable Employment
output:
beamer_presentation:
keep_tex: no
latex_engine: xelatex
slide_level: 2
incremental: no
highlight: github
fontsize: 10pt
# classoption: "aspectratio=169"
# `plot(cars, main = 'A scatterplot.')`{.R}
# above code is for highlighted in-line text
header-includes:
- \usepackage{booktabs}
- \usepackage{appendixnumberbeamer}
- \usepackage{xcolor}
- \usepackage{graphicx}
- \usepackage{hyperref}
- \usepackage{multicol}
- \usepackage{threeparttable}
- \usetheme[progressbar = frametitle]{metropolis}
- \definecolor{pinkish}{RGB}{230,65,115}
- \definecolor{blueish}{RGB}{66,133,244}
- \definecolor{greyish}{RGB}{248,248,248}
- \definecolor{purpleish}{RGB}{106, 90, 205}
- \definecolor{orangeish}{RGB}{255,159,70}
- \definecolor{maro}{RGB}{206,31,106}
- \setbeamercolor{alerted text}{fg = pinkish}
- \setbeamercolor{background canvas}{bg=white}
- \hypersetup{colorlinks, citecolor = blueish,  filecolor = blueish, linkcolor = blueish, urlcolor=blueish}
- \setbeamercolor{progress bar}{fg=pinkish}
- \newcommand{\code}{\texttt}
- \usepackage{caption}
- \captionsetup[table]{belowskip=0pt,aboveskip=0pt}
install.packages("fixest")
library(fixest)
# in case these are not installed - uncomment and then run.
# install.packages("readxl")
# install.packages("ggplot2")
options(scipen=3)
# Loading excel files
library(readxl)
library(fixest)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(stargazer)
library(patchwork)
my_theme <- function(base_size = 12,
base_family = "") {
theme_minimal(base_size = base_size,
base_family = base_family) %+replace%
theme(
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y  =  element_line(
colour = "#c9c0b7",
linetype = "dotted",
size = 0.5),
axis.ticks = element_line(size = .5, colour = "#c9c0b7"),
axis.ticks.x = element_blank(),
axis.line = element_line(
size = 0.5,
colour = "#c9c0b7",
linetype = "solid"),
axis.line.y = element_blank(),
axis.text.y = element_text(colour = "black",
margin = margin(r = 2),
hjust = 1),
axis.text.x = element_text(colour = "black"),
legend.title = element_blank(),
complete = TRUE)
}
theme_set(my_theme(base_size = 15))
mypink <- "#e95984"
mypurple <- "#b649ff"
cseblue <- "#16926d"
# Setting working directory
setwd("C:/Users/admin/cse Dropbox/Zaeen de Souza/Files From Deepti/Problem Sets - Latex, Code, Rmd/econometric-methods/Chapters/Chapter 11 Binary Dependent Variable/Dataset")
# Loading the data as 'pset_data'
pset_data1 <- read_excel("employment_06_07.xlsx")
pset_data2 <- read_excel("employment_08_09.xlsx")
pset_data1$Black <- ifelse(pset_data1$race==2, 1,0)
pset_data1$age_sq <- pset_data1$age^2
pset_data2$age_sq <- pset_data2$age^2
# latex output - table editing for etable()
set_rules = function(x, heavy, light){
# x: the character vector returned by etable
tex2add = ""
if(!missing(heavy)){
tex2add = paste0("\\setlength\\heavyrulewidth{", heavy, "}\n")
}
if(!missing(light)){
tex2add = paste0(tex2add, "\\setlength\\lightrulewidth{", light, "}\n")
}
if(nchar(tex2add) > 0){
x[x == "%start:tab\n"] = tex2add
}
x
}
# fixest dictionry for table labels in for etable()
setFixest_dict(c(employed = "Employed",
unemployed = "Unemployed",
age = "Age",
age_sq = "Age$^{2}$",
female = "Female",
married = "Married",
race = "Race",
union = "Union Member",
ne_states = "North-East State",
so_states = "Southern State",
ce_states = "Central State",
we_states = "Western State",
private = "Private Firm",
government = "Govt. Firm",
self = "Self-Employed",
educ_lths = "Below High School",
educ_hs=  "High School",
educ_somecol = "Some College",
educ_aa = "Assoc. Degree",
educ_bac = "BA/BS Degree",
edu_adv = "Adv. Degree",
earnke = "Weekly Earnings"))
# for etable() styling
setFixest_etable(style.tex = style.tex(main = "base",
depvar.title = "",
model.title = "",
var.title = "\\midrule \\",
yesNo = "$\\checkmark$",
fixef.title = "\\midrule",
fixef.suffix = " Fixed Effects",
stats.title = "\\midrule"))
model_1 <- feols(employed ~ age + age_sq, data = pset_data2, vcov = "HC1")
etable(model_1,
fitstat = ~ r2 + n,
tex = TRUE,
title = "E.11.1 b",
digits = 3,
digits.stats = "r3",
order = c("!Inter"))
